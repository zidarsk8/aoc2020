from parsimonious.grammar import Grammar
from parsimonious.nodes import NodeVisitor

grammar = Grammar(
    """
    expression =  plus_exp / number
    plus_exp   = number plus expression
    number     = ~"[0-9]*"i
    plus       = "+" / "*"
    """
)


class IniVisitor(NodeVisitor):
    def visit_expr(self, node, visited_children):
        """ Returns the overall output. """
        output = {}
        for child in visited_children:
            output.update(child[0])
        return output

    def visit_entry(self, node, visited_children):
        """ Makes a dict of the section (as key) and the key/value pairs. """
        key, values = visited_children
        return {key: dict(values)}

    def visit_section(self, node, visited_children):
        """ Gets the section name. """
        _, section, *_ = visited_children
        return section.text

    def visit_plus(self, node, visited_children):
        """ Gets each key/value pair, returns a tuple. """
        print("plus", node)
        breakpoint()
        return 11

    def visit_number(self, node, visited_children):
        """ Gets each key/value pair, returns a tuple. """
        print("number", node)
        return 11

    def generic_visit(self, node, visited_children):
        """ The generic visit method. """
        return visited_children or node


def test_peg():
    tree = grammar.parse("1 + 2".replace(" ", ""))
    tree = grammar.parse("1 + 2 * 3 + 4".replace(" ", ""))
    print(tree)

    iv = IniVisitor()
    output = iv.visit(tree)
    print(output)
    assert False


def evaluate_line(text):
    parsed = l.parse(text.replace(" ", ""))
    print(parsed.pretty())
    return MyTransformer().transform(parsed)


def test_evaluate_line():
    return
    assert evaluate_line("1 + 2 * 3+1") == 8
    assert evaluate_line("1 + 2 * 3 + 4 * 5 + 6") == 71
    assert evaluate_line("1 + (2 * 3) + (4 * (5 + 6))") == 51

    assert evaluate_line("2 * 3 + (4 * 5)") == 26
    assert evaluate_line("5 + (8 * 3 + 9 + 3 * 4 * 3)") == 437
    assert evaluate_line("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))") == 12240
    assert evaluate_line("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2") == 13632
